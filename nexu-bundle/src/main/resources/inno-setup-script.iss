; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "NexU (NSK ${platform.classifier})"
#define MyDateTimeString GetDateTimeString('yyyymmdd', '-', ':')
#define MyAppVersion "1.23 " + MyDateTimeString + " ${platform.classifier}"
#define MyAppPublisher "Nowina Solutions (with modifications by Unisystems)"
#define MyAppURL "https://nowina.lu/solutions/java-less-browser-signing-nexu/"
#define MyAppSupportURL "https://github.com/hello-earth-gh/nexu"
#define MyAppExeName "NexU-Startup.bat"
#define MyAppExeName2 "NexU-Startup_debug.bat"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{91CD36E5-A77A-4039-AEA5-6C6C35443D20}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppSupportURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={localappdata}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=license.txt
; Remove the following line to run in administrative install mode (install for all users.)
PrivilegesRequired=lowest
OutputDir=inno
OutputBaseFilename=nexu-setup-${platform.classifier}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupLogging=yes
CloseApplications=force
MinVersion=0.0,5.0

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
; Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "java\*"; DestDir: "{app}\java"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "nexu.jar"; DestDir: "{app}"; Flags: ignoreversion
Source: "NexU-Startup.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "NexU-Startup_debug.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "NexU-Kill.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "tray_icon.ico"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{userprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\tray_icon.ico"
; Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\tray_icon.ico"
Name: "{userstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\tray_icon.ico"; WorkingDir: "{app}"
Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\tray_icon.ico"; WorkingDir: "{app}"
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\tray_icon.ico"; WorkingDir: "{app}"

[Run]
; don't need to create service - just place the shortcut into Startup folder - since we don't need a service, paths could have been left as is in the BAT file
; but i'm substituting them into absolute paths anyway since it doesn't matter much
; Filename: {sys}\sc.exe; Parameters: "create nexu-service start= auto binPath= ""\\""{app}\\java\\bin\\javaw.exe\\"" ""-Djavafx.preloader=lu.nowina.nexu.NexUPreLoader"" ""-Dglass.accessible.force=false"" ""-jar"" ""{app}\\nexu.jar""" ; Flags: runhidden

Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall

[UninstallRun]
; Filename: {sys}\sc.exe; Parameters: "stop nexu-service" ; Flags: runhidden
; Filename: {sys}\sc.exe; Parameters: "delete nexu-service" ; Flags: runhidden
Filename: {app}\NexU-Kill.bat; Flags: runhidden

[UninstallDelete]
Type: filesandordirs; Name: "{localappdata}\Nowina"

[Code]
// https://stackoverflow.com/questions/20174359/replace-a-text-in-a-file-with-inno-setup
function FileReplaceString(const FileName, SearchString, ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  MyFile := TStringList.Create;

  try
    result := true;

    try
      MyFile.LoadFromFile(FileName);
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, SearchString, ReplaceString, True) > 0 then
      begin;
        MyFile.Text := MyText;
        MyFile.SaveToFile(FileName);
      end;
    except
      result := false;
    end;
  finally
    MyFile.Free;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ExeFilePath: String;
  AppPath: String;
begin
  // note that this is not needed anymore, since we are not running NexU as a service
  // but okay i am leaving this anyway
  if CurStep = ssPostInstall then
  begin
    AppPath := ExpandConstant('{app}')

    ExeFilePath := AppPath + '\' + ExpandConstant('{#MyAppExeName2}');
    Log('Substituting absolute paths in ' + ExeFilePath);
    FileReplaceString(ExeFilePath, '__{app}', AppPath);

    ExeFilePath := AppPath + '\' + ExpandConstant('{#MyAppExeName}');
    Log('Substituting absolute paths in ' + ExeFilePath);
    FileReplaceString(ExeFilePath, '__{app}', AppPath);
  end;
end;